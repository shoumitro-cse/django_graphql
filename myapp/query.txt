
##  The GraphQL code below is requesting all the books from the database.
query {
  allBooks {
    id
    title
    author
    yearPublished
    review
  }
}


##  single book by its id
query {
  book(bookId: 2) {
    id
    title
    author
  }
}


## Creating a book
mutation createMutation {
  createBook(bookData: {title: "Things Apart", author: "Chinua Achebe", yearPublished: "1985", review: 3}) {
    book {
      title,
      author,
      yearPublished,
      review
    }
  }
}

mutation createMutation {
  createBook(bookData: {title: "Things Apart", author: "Chinua Achebe", yearPublished: "1985",
    review: 3, metadata:"{\"is_admin\": true, \"email\": \"albert@example.com\"}"}) {
    book {
      title,
      author,
      yearPublished,
      review,
      metadata
    }
  }
}

mutation createMutation {
  createBook(bookData: {title: "Things Apart", author: "Chinua Achebe", yearPublished: "1985",
    review: 3, metadata:"{}"}) {
    book {
      title,
      author,
      yearPublished,
      review,
      metadata
    }
  }
}

## Updating an existing book
mutation updateMutation {
  updateBook(bookData: {id: 6, title: "Things Fall Apart", author: "Chinua Achebe", yearPublished: "1958", review: 5}) {
    book {
      title,
      author,
      yearPublished,
      review
    }
  }
}


## Deleting a book
mutation deleteMutation{
  deleteBook(id: 6) {
    book {
      id
    }
  }
}


## We will use TokenAuth to authenticate the User with its username and password and obtain the JSON Web Token.
mutation {
  tokenAuth(username:"shoumitro", password: "QWERTYU12345678") {
    token
    payload
    refreshExpiresIn
    refreshToken
  }
}


# for => token_auth = graphql_jwt.relay.ObtainJSONWebToken.Field()
# https://django-graphql-jwt.domake.io/relay.html
mutation {
  tokenAuth(input:{username:"shoumitro", password: "QWERTYU12345678"}) {
    token
    payload
    refreshExpiresIn
  }
}


# We will use VerifyToken to verify that the token passed as an argument is a valid token.
mutation {
  verifyToken(token:"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6InNob3VtaXRybyIsImV4cCI6MTYzNDI5Mjk4MCwib3JpZ0lhdCI6MTYzNDI5MjY4MH0.FHHJOJcleu1ukk8sXHvzwUFEgKKXjZlqRgBwSrqA3Hw") {
    payload
  }
}


# refreshToken to obtain a brand new token with renewed expiration time:
mutation {
  refreshToken(token:"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6InNob3VtaXRybyIsImV4cCI6MTYzNDI5Mjk4MCwib3JpZ0lhdCI6MTYzNDI5MjY4MH0.FHHJOJcleu1ukk8sXHvzwUFEgKKXjZlqRgBwSrqA3Hw") {
    payload
    refreshExpiresIn
    token
  }
}

# https://hasura.io/blog/how-to-setup-authentication-with-django-graphene-and-hasura-graphql/
# last token example after add => graphql_jwt.refresh_token.apps.RefreshTokenConfig app inside INSTALLED_APPS
mutation {
  tokenAuth(username:"shoumitro", password: "QWERTYU12345678") {
    token
    payload
    refreshExpiresIn
    refreshToken
  }
}

mutation {
    verifyToken(token:"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6InNob3VtaXRybyIsInN1YiI6IjEiLCJzdWJfbmFtZSI6InNob3VtaXRybyIsInN1Yl9lbWFpbCI6IiIsImV4cCI6MTYzNDM2MDc0NCwiaHR0cHM6Ly9oYXN1cmEuaW8vand0L2NsYWltcyI6eyJ4LWhhc3VyYS11c2VyLWlkIjoiMSJ9fQ.lpufgZHYLDnFK--i6K1PI0fXNBpzJVYyLjJngWvSX5M") {
    payload
  }
}

mutation {
  refreshToken(refreshToken:"801c1648d2017cd9f5b202eda33ac65387acb05d") {
    payload
    refreshExpiresIn
    token
  }
}


# show user list
query {
  users {
    id
    username
    email
    lastName
    firstName
    password
  }
}


## Creating a user
mutation createMutation {
  createUser(username:"test", password:"123456", email:"abc@gmail.com") {
    user {
      id
	  username
      password
      email
      isSuperuser
      isStaff
      isActive
      firstName
      lastName
      lastLogin
      dateJoined
      __typename
    }
  }
}


mutation createUser {
  createUser(username: "test5", password: "1234", email: "ab@gmail.com") {
    token
    user {
      username
    }
  }
}

mutation createMutation {
  createUser(username:"test6", password:"123456", email:"abc@gmail.com") {
    token
    refreshToken
    user {
      id
	  username
      password
      email
      isSuperuser
      isStaff
      isActive
      firstName
      lastName
      lastLogin
      dateJoined
      __typename
    }
  }
}


# get current user
query {
  me {
    id
    username
    email
    lastName
    firstName
    password
  }
}


# combine query
query {

  allBooks {
    id
    title
    author
    yearPublished
    review
  },
  users {
    id
    username
    email
    lastName
    firstName
    password
 },
 me {
    id
    username
    email
    lastName
    firstName
    password
  },
}

